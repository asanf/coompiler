

/*
 *  The scanner definition for COOL token stream
 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 13/03/09 21.30 from the specification file
 * <tt>C:/Documents and Settings/gencos/workspace/parser/bin/tokens.lex</tt>
 */
class CoolTokenLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int INT = 4;
  public static final int BOOL = 5;
  public static final int STR = 2;
  public static final int STRING = 8;
  public static final int YYINITIAL = 0;
  public static final int ERR = 3;
  public static final int TYPSYM = 6;
  public static final int OBJSYM = 7;
  public static final int TOKEN = 1;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  1,  2,  2,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     2,  0, 12,  6,  0,  0,  0, 30, 42, 43, 34, 31, 39, 33, 37, 32, 
    57, 57, 57, 57, 58, 58, 58, 58,  7,  7, 41, 40, 36, 35,  0,  0, 
    44, 15, 46, 13, 28, 17, 18, 27, 21, 19, 48,  3, 14,  3, 20, 24, 
    25,  3, 22, 16, 23,  3, 29, 26,  3, 47,  3,  0, 55,  0,  0,  4, 
     0,  9, 56,  3,  3, 11, 52,  3,  3,  3,  3,  3, 53, 10,  8,  3, 
     3,  3, 50, 54, 49, 51,  3,  3,  3,  3,  3,  5,  0, 45, 38,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\1\21\3\2\4\1\5\2\6"+
    "\1\7\2\10\1\11\4\12\1\13\1\14\1\13\1\15"+
    "\2\16\1\17\1\16\1\20\3\0\1\21\6\0\1\22"+
    "\1\0\1\23\1\24\4\0\1\25\27\0\1\26\1\27"+
    "\1\30\1\31\1\32\1\26\3\0\1\33\11\0\1\34"+
    "\1\35\6\0\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\6\0\1\56\1\57\2\0\1\60\1\61"+
    "\4\0\1\62\2\0\1\63\3\0\1\64\1\0\1\65"+
    "\1\0\1\66\2\0\1\67\5\0\1\70\2\0\1\71"+
    "\1\72\1\73\1\0\1\74\2\0\1\75\1\0\1\76"+
    "\7\0\1\77\1\0\1\100\1\0\1\101\1\102\1\0"+
    "\1\103";

  private static int [] zzUnpackAction() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u0213\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0213\0\u0289\0\u0213"+
    "\0\u0213\0\u0289\0\u0213\0\u0213\0\u0289\0\u0639\0\u0213\0\u0289"+
    "\0\u0674\0\u06af\0\u0213\0\u06ea\0\u0289\0\u0725\0\u0213\0\u0289"+
    "\0\u0213\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2"+
    "\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0213\0\u0a24\0\u0213"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0213\0\u0b86\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0\0\u0efb\0\u0f36\0\u0f71"+
    "\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u0213\0\u0213\0\u0213"+
    "\0\u0213\0\u0213\0\u10d3\0\u110e\0\u1149\0\u1184\0\u0213\0\u11bf"+
    "\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397"+
    "\0\u0213\0\u0213\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u14f9"+
    "\0\u0213\0\u0213\0\u0213\0\u0213\0\u0213\0\u0213\0\u0213\0\u0213"+
    "\0\u0213\0\u0213\0\u0213\0\u0213\0\u0213\0\u0213\0\u0213\0\u0213"+
    "\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u0213\0\u0213"+
    "\0\u1696\0\u16d1\0\u0213\0\u0213\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u0213\0\u17f8\0\u1833\0\u0213\0\u186e\0\u18a9\0\u18e4\0\u0213"+
    "\0\u191f\0\u0213\0\u195a\0\u0213\0\u1995\0\u19d0\0\u0213\0\u1a0b"+
    "\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u0213\0\u1b32\0\u1b6d\0\u0213"+
    "\0\u0213\0\u0213\0\u1ba8\0\u0213\0\u1be3\0\u1c1e\0\u0213\0\u1c59"+
    "\0\u0213\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6"+
    "\0\u0213\0\u1e31\0\u0213\0\u1e6c\0\u0213\0\u0213\0\u1ea7\0\u0213";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\2\13\3\12\1\14\64\12\1\15\2\13\3\15"+
    "\1\16\6\15\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\2\15\1\27\1\30\1\31\1\32\1\15"+
    "\1\33\1\15\1\34\17\15\1\35\14\15\1\36\2\13"+
    "\3\36\1\37\5\36\1\40\56\36\1\41\2\13\3\41"+
    "\1\42\5\41\1\43\56\41\1\44\2\13\3\44\1\45"+
    "\1\46\61\44\2\46\1\47\2\13\3\47\1\50\52\47"+
    "\1\51\2\47\1\52\6\47\1\53\2\13\1\54\2\53"+
    "\1\55\1\53\4\54\1\53\21\54\20\53\11\54\1\53"+
    "\1\54\3\53\2\13\1\56\2\53\1\55\1\53\4\56"+
    "\1\53\21\56\20\53\11\56\1\53\1\56\2\53\1\57"+
    "\1\0\4\57\1\60\5\57\1\61\52\57\1\62\3\57"+
    "\74\0\2\13\77\0\1\63\1\64\60\0\2\63\16\0"+
    "\1\65\1\66\74\0\1\67\6\0\1\70\62\0\1\71"+
    "\101\0\1\72\61\0\1\73\1\0\1\74\5\0\1\75"+
    "\67\0\1\76\67\0\1\77\1\0\1\100\1\0\1\101"+
    "\67\0\1\102\6\0\1\103\67\0\1\104\31\0\1\105"+
    "\35\0\1\106\33\0\1\107\44\0\1\110\67\0\1\111"+
    "\64\0\1\112\60\0\1\113\31\0\1\114\1\115\1\116"+
    "\1\117\1\120\1\121\1\122\1\123\1\124\1\125\1\126"+
    "\1\127\1\130\1\131\1\132\45\0\1\133\51\0\1\46"+
    "\61\0\2\46\62\0\1\134\21\0\1\135\64\0\2\54"+
    "\2\0\5\54\1\0\21\54\20\0\11\54\1\0\3\54"+
    "\3\0\2\56\2\0\5\56\1\0\21\56\20\0\11\56"+
    "\1\0\3\56\1\136\1\0\6\136\1\137\50\136\1\140"+
    "\2\136\1\141\3\136\1\142\1\143\1\136\7\0\1\63"+
    "\61\0\2\63\11\0\1\144\100\0\1\145\73\0\1\146"+
    "\101\0\1\147\73\0\1\150\62\0\1\151\100\0\1\152"+
    "\64\0\1\153\71\0\1\154\101\0\1\155\101\0\1\156"+
    "\62\0\1\157\1\0\1\160\75\0\1\161\67\0\1\162"+
    "\64\0\1\163\102\0\1\164\121\0\1\165\42\0\1\166"+
    "\65\0\1\167\75\0\1\170\102\0\1\171\72\0\1\172"+
    "\72\0\1\173\72\0\1\174\72\0\1\175\72\0\1\176"+
    "\72\0\1\177\72\0\1\200\72\0\1\201\72\0\1\202"+
    "\72\0\1\203\72\0\1\204\72\0\1\205\72\0\1\206"+
    "\72\0\1\207\72\0\1\210\64\0\1\211\125\0\1\212"+
    "\74\0\1\213\76\0\2\214\12\0\1\215\100\0\1\216"+
    "\73\0\1\217\102\0\1\220\64\0\1\221\53\0\1\222"+
    "\107\0\1\223\66\0\1\224\105\0\1\225\72\0\1\226"+
    "\63\0\1\227\55\0\1\230\112\0\1\231\67\0\1\232"+
    "\72\0\1\233\67\0\1\234\72\0\1\235\102\0\1\236"+
    "\62\0\1\237\67\0\1\240\145\0\1\241\75\0\2\242"+
    "\13\0\1\243\77\0\1\244\105\0\1\245\54\0\1\246"+
    "\103\0\1\247\67\0\1\250\75\0\1\251\61\0\1\252"+
    "\100\0\1\253\64\0\1\254\76\0\1\255\101\0\1\256"+
    "\46\0\1\257\101\0\1\260\60\0\2\243\11\0\1\261"+
    "\102\0\1\262\76\0\1\263\76\0\1\264\61\0\1\265"+
    "\77\0\1\266\76\0\1\267\65\0\1\270\75\0\1\271"+
    "\55\0\1\272\101\0\1\273\75\0\1\274\67\0\1\275"+
    "\71\0\1\276\77\0\1\277\62\0\1\300\72\0\1\301"+
    "\72\0\1\302\106\0\1\303\62\0\1\304\75\0\1\305"+
    "\72\0\1\306\63\0\1\307\101\0\1\310\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7906];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\2\1\1\11\20\1\1\11\1\1\2\11"+
    "\1\1\2\11\2\1\1\11\3\1\1\11\3\1\1\11"+
    "\1\1\1\11\2\1\3\0\1\1\6\0\1\11\1\0"+
    "\1\11\1\1\4\0\1\11\27\0\5\11\1\1\3\0"+
    "\1\11\11\0\2\11\6\0\20\11\6\0\2\11\2\0"+
    "\2\11\4\0\1\11\2\0\1\11\3\0\1\11\1\0"+
    "\1\11\1\0\1\11\2\0\1\11\5\0\1\11\2\0"+
    "\3\11\1\0\1\11\2\0\1\11\1\0\1\11\7\0"+
    "\1\11\1\0\1\11\1\0\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[200];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    int curr_lineno() {
	return line;
    }

    private AbstractSymbol  filename;

    AbstractSymbol curr_filename() {
	return filename;
    }

    int prevstate;
    int line;
    StringBuffer buf = new StringBuffer();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoolTokenLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CoolTokenLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { yybegin(YYINITIAL);
			switch(prevstate) {
			case STR: 
			    return new Symbol(TokenConstants.STR_CONST, 
			                      AbstractTable.stringtable.addString(buf.toString())); 
			case ERR:
			    return new Symbol(TokenConstants.ERROR, 
			                      buf.toString()); 
			case YYINITIAL:
			    filename = 	AbstractTable.stringtable.addString(buf.toString());
			    break;
			default:
			    throw new Error("unknown state");
			}
          }
        case 68: break;
        case 54: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.CLASS);
          }
        case 69: break;
        case 65: 
          { yybegin(STR);
          }
        case 70: break;
        case 55: 
          { yybegin(ERR);
          }
        case 71: break;
        case 66: 
          { yybegin(INT);
          }
        case 72: break;
        case 58: 
          { buf.setLength(0); prevstate = YYINITIAL; yybegin(STRING);
          }
        case 73: break;
        case 52: 
          { yybegin(YYINITIAL);
		        return new Symbol(TokenConstants.BOOL_CONST, Boolean.TRUE);
          }
        case 74: break;
        case 6: 
          { throw new Error("unmatched text in token lexer; error message expected");
          }
        case 75: break;
        case 47: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.LOOP);
          }
        case 76: break;
        case 31: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.PLUS);
          }
        case 77: break;
        case 23: 
          { buf.append('\n');
          }
        case 78: break;
        case 64: 
          { yybegin(OBJSYM);
          }
        case 79: break;
        case 49: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.ESAC);
          }
        case 80: break;
        case 42: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.LPAREN);
          }
        case 81: break;
        case 57: 
          { yybegin(YYINITIAL);
		        return new Symbol(TokenConstants.BOOL_CONST, Boolean.FALSE);
          }
        case 82: break;
        case 26: 
          { buf.append('\b');
          }
        case 83: break;
        case 46: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.CASE);
          }
        case 84: break;
        case 38: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.NEG);
          }
        case 85: break;
        case 48: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.ELSE);
          }
        case 86: break;
        case 19: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.IF);
          }
        case 87: break;
        case 27: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.LET);
          }
        case 88: break;
        case 50: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.THEN);
          }
        case 89: break;
        case 45: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.RBRACE);
          }
        case 90: break;
        case 34: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.MULT);
          }
        case 91: break;
        case 4: 
          { throw new Error("unmatched text in token lexer; string constant expected");
          }
        case 92: break;
        case 7: 
          { prevstate = ERR; buf.setLength(0); yybegin(STRING);
          }
        case 93: break;
        case 63: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.INHERITS);
          }
        case 94: break;
        case 20: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.IN);
          }
        case 95: break;
        case 16: 
          { try {
			    line = Integer.parseInt(yytext().substring(1)); 
			} catch (NumberFormatException ex) {
			    ex.printStackTrace(System.err);
			    line = 0;
			}
			yybegin(TOKEN);
          }
        case 96: break;
        case 35: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.EQ);
          }
        case 97: break;
        case 44: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.AT);
          }
        case 98: break;
        case 62: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.DARROW);
          }
        case 99: break;
        case 28: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.NEW);
          }
        case 100: break;
        case 22: 
          { buf.append(yytext().substring(1));
          }
        case 101: break;
        case 60: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.ISVOID);
          }
        case 102: break;
        case 40: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.SEMI);
          }
        case 103: break;
        case 14: 
          { buf.append(yytext());
          }
        case 104: break;
        case 41: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.COLON);
          }
        case 105: break;
        case 11: 
          { throw new Error("unmatched text in token lexer; type symbol expected");
          }
        case 106: break;
        case 9: 
          { yybegin(YYINITIAL); 
		        return new Symbol(TokenConstants.INT_CONST,
			                  AbstractTable.inttable.addString(yytext()));
          }
        case 107: break;
        case 56: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.WHILE);
          }
        case 108: break;
        case 37: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.DOT);
          }
        case 109: break;
        case 10: 
          { throw new Error("unmatched text in token lexer; boolean constant expected");
          }
        case 110: break;
        case 24: 
          { buf.append('\t');
          }
        case 111: break;
        case 8: 
          { throw new Error("unmatched text in token lexer; integer constant expected");
          }
        case 112: break;
        case 17: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.LE);
          }
        case 113: break;
        case 51: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.POOL);
          }
        case 114: break;
        case 43: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.RPAREN);
          }
        case 115: break;
        case 61: 
          { yybegin(TYPSYM);
          }
        case 116: break;
        case 18: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.FI);
          }
        case 117: break;
        case 33: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.MINUS);
          }
        case 118: break;
        case 21: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.OF);
          }
        case 119: break;
        case 12: 
          { yybegin(YYINITIAL);
		        return new Symbol(TokenConstants.TYPEID, 
			                  AbstractTable.idtable.addString(yytext()));
          }
        case 120: break;
        case 3: 
          { throw new Error("unmatched text in token lexer; token expected");
          }
        case 121: break;
        case 67: 
          { yybegin(BOOL);
          }
        case 122: break;
        case 30: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.LBRACE);
          }
        case 123: break;
        case 29: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.NOT);
          }
        case 124: break;
        case 25: 
          { buf.append('\f');
          }
        case 125: break;
        case 53: 
          { buf.append((char)Integer.parseInt(yytext().substring(1), 8));
          }
        case 126: break;
        case 1: 
          { throw new Error("unmatched text in token lexer; line number expected");
          }
        case 127: break;
        case 39: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.COMMA);
          }
        case 128: break;
        case 32: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.DIV);
          }
        case 129: break;
        case 36: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.LT);
          }
        case 130: break;
        case 5: 
          { prevstate = STR; buf.setLength(0); yybegin(STRING);
          }
        case 131: break;
        case 13: 
          { yybegin(YYINITIAL);
		        return new Symbol(TokenConstants.OBJECTID, 
			                  AbstractTable.idtable.addString(yytext()));
          }
        case 132: break;
        case 59: 
          { yybegin(YYINITIAL); return new Symbol(TokenConstants.ASSIGN);
          }
        case 133: break;
        case 2: 
          { 
          }
        case 134: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return new Symbol(TokenConstants.EOF); 
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
