/* The following code was generated by JFlex 1.4.3 on 12/04/13 9.41 */

/*
 *  The scanner definition for COOL.
 */

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/04/13 9.41 from the specification file
 * <tt>/home/e-vampire/Documenti/Universit√†/Compilatori/2013/Progetto/Lexer/src/cool.lex</tt>
 */
class CoolLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;
  public static final int NULL_FINDED = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\74\10\0\1\7\1\5\1\0\1\7\1\6\22\0\1\7\1\0"+
    "\1\56\5\0\1\53\1\55\1\54\1\72\1\63\1\52\1\64\1\71"+
    "\12\1\1\65\1\61\1\62\1\57\1\60\1\0\1\70\1\22\1\3"+
    "\1\44\1\51\1\17\1\31\1\3\1\35\1\30\2\3\1\24\1\3"+
    "\1\33\1\40\1\42\1\3\1\13\1\26\1\36\1\15\1\47\1\46"+
    "\3\3\1\0\1\75\2\0\1\4\1\0\1\21\1\76\1\43\1\50"+
    "\1\16\1\20\1\2\1\34\1\27\2\2\1\23\1\2\1\32\1\37"+
    "\1\41\1\2\1\12\1\25\1\11\1\14\1\10\1\45\3\2\1\66"+
    "\1\0\1\67\1\73\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\2\6\2\3"+
    "\1\4\2\3\1\4\1\3\2\4\1\3\2\4\1\3"+
    "\1\4\1\3\1\4\1\3\1\4\1\3\1\4\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\2\6\1\30\1\31\1\32\1\33\1\6\1\34\1\6"+
    "\1\35\4\3\2\4\1\3\1\36\2\3\2\4\1\37"+
    "\1\3\1\40\1\37\1\4\1\40\1\36\2\3\3\4"+
    "\2\41\1\3\1\4\2\3\2\4\1\3\1\4\1\0"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\4\3"+
    "\2\4\1\3\1\61\1\3\1\61\1\4\2\3\2\4"+
    "\1\62\1\63\1\62\1\63\1\4\1\3\1\4\2\3"+
    "\2\4\1\3\1\4\1\64\1\65\1\66\1\67\1\66"+
    "\1\67\1\3\2\70\2\3\2\4\1\65\2\71\1\72"+
    "\1\3\1\72\1\4\1\3\1\4\1\73\2\3\2\4"+
    "\2\74\2\75\1\76\1\3\1\76\1\4\1\3\1\4"+
    "\2\77";

  private static int [] zzUnpackAction() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\374\0\u01f8\0\374\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b"+
    "\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\u07a1\0\374\0\374\0\u07e0\0\374\0\u081f\0\374"+
    "\0\374\0\374\0\374\0\374\0\374\0\374\0\374\0\374"+
    "\0\u085e\0\u089d\0\u08dc\0\374\0\374\0\374\0\u091b\0\374"+
    "\0\u095a\0\374\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4"+
    "\0\u0b13\0\u017a\0\u0b52\0\u0b91\0\u0bd0\0\u0c0f\0\u017a\0\u0c4e"+
    "\0\u0c8d\0\u01b9\0\u0ccc\0\u0d0b\0\u01b9\0\u0d4a\0\u0d89\0\u0dc8"+
    "\0\u0e07\0\u0e46\0\u017a\0\u01b9\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\374\0\374\0\374"+
    "\0\374\0\374\0\374\0\374\0\374\0\374\0\374\0\374"+
    "\0\374\0\374\0\374\0\374\0\u10bc\0\u10fb\0\u113a\0\u1179"+
    "\0\u11b8\0\u11f7\0\u1236\0\u017a\0\u1275\0\u01b9\0\u12b4\0\u12f3"+
    "\0\u1332\0\u1371\0\u13b0\0\u017a\0\u017a\0\u01b9\0\u01b9\0\u13ef"+
    "\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7"+
    "\0\u017a\0\u017a\0\u017a\0\u017a\0\u01b9\0\u01b9\0\u1626\0\u017a"+
    "\0\u01b9\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u01b9\0\u017a\0\u01b9"+
    "\0\u017a\0\u1761\0\u01b9\0\u17a0\0\u17df\0\u181e\0\u017a\0\u185d"+
    "\0\u189c\0\u18db\0\u191a\0\u017a\0\u01b9\0\u017a\0\u01b9\0\u017a"+
    "\0\u1959\0\u01b9\0\u1998\0\u19d7\0\u1a16\0\u017a\0\u01b9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\5\1\11\1\12\1\13"+
    "\1\7\1\14\1\7\1\10\1\7\1\10\1\15\1\16"+
    "\1\17\1\7\1\10\1\20\1\21\1\7\1\10\1\22"+
    "\1\23\1\24\1\25\1\26\1\7\1\10\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\10"+
    "\1\7\1\10\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\5\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\2\5\1\7\5\13\1\11"+
    "\1\12\44\13\1\61\1\62\22\13\5\63\1\64\1\0"+
    "\47\63\1\65\15\63\1\66\1\67\1\63\5\13\1\70"+
    "\1\71\47\13\1\72\20\13\100\0\1\6\76\0\4\7"+
    "\3\0\42\7\24\0\1\7\1\0\4\10\3\0\42\10"+
    "\24\0\1\10\5\0\1\11\72\0\4\7\3\0\2\7"+
    "\2\73\20\7\2\74\14\7\24\0\1\7\1\0\4\7"+
    "\3\0\13\7\2\75\2\76\23\7\24\0\1\7\1\0"+
    "\4\10\3\0\13\10\2\77\2\100\23\10\24\0\1\10"+
    "\1\0\4\7\3\0\11\7\2\101\4\7\2\102\21\7"+
    "\24\0\1\7\1\0\4\7\3\0\6\7\2\103\17\7"+
    "\2\104\11\7\24\0\1\7\1\0\4\10\3\0\6\10"+
    "\2\105\17\10\2\106\11\10\24\0\1\10\1\0\4\7"+
    "\3\0\10\7\1\107\4\7\2\110\2\7\1\107\2\111"+
    "\16\7\24\0\1\7\1\0\4\10\3\0\10\10\1\112"+
    "\4\10\2\113\2\10\1\112\2\114\16\10\24\0\1\10"+
    "\1\0\4\10\3\0\17\10\2\115\21\10\24\0\1\10"+
    "\1\0\4\7\3\0\6\7\2\116\17\7\2\117\11\7"+
    "\24\0\1\7\1\0\4\10\3\0\6\10\2\120\17\10"+
    "\2\121\11\10\24\0\1\10\1\0\4\10\3\0\24\10"+
    "\2\122\14\10\24\0\1\10\1\0\4\7\3\0\10\7"+
    "\1\123\10\7\1\123\20\7\24\0\1\7\1\0\4\10"+
    "\3\0\10\10\1\124\10\10\1\124\20\10\24\0\1\10"+
    "\1\0\4\7\3\0\27\7\2\125\11\7\24\0\1\7"+
    "\1\0\4\10\3\0\27\10\2\126\11\10\24\0\1\10"+
    "\1\0\4\7\3\0\11\7\2\127\2\130\25\7\24\0"+
    "\1\7\1\0\4\10\3\0\11\10\2\131\2\132\25\10"+
    "\24\0\1\10\1\0\4\7\3\0\24\7\2\133\14\7"+
    "\24\0\1\7\1\0\4\10\3\0\24\10\2\134\14\10"+
    "\24\0\1\10\52\0\1\135\100\0\1\136\77\0\1\137"+
    "\101\0\1\140\70\0\1\141\4\0\1\142\73\0\1\143"+
    "\77\0\1\144\21\0\5\63\2\0\47\63\1\0\15\63"+
    "\2\0\1\63\5\0\1\145\3\0\1\146\6\0\1\147"+
    "\11\0\1\150\23\0\1\151\15\0\1\152\1\153\1\154"+
    "\5\0\1\70\72\0\4\7\3\0\4\7\2\155\34\7"+
    "\24\0\1\7\1\0\4\7\3\0\6\7\2\156\32\7"+
    "\24\0\1\7\1\0\4\7\3\0\15\7\2\157\23\7"+
    "\24\0\1\7\1\0\4\7\3\0\11\7\2\160\27\7"+
    "\24\0\1\7\1\0\4\10\3\0\15\10\2\161\23\10"+
    "\24\0\1\10\1\0\4\10\3\0\11\10\2\162\27\10"+
    "\24\0\1\10\1\0\4\7\3\0\13\7\2\163\25\7"+
    "\24\0\1\7\1\0\4\7\3\0\1\7\1\164\24\7"+
    "\1\164\13\7\24\0\1\7\1\0\4\7\3\0\27\7"+
    "\2\165\11\7\24\0\1\7\1\0\4\10\3\0\1\10"+
    "\1\166\24\10\1\166\13\10\24\0\1\10\1\0\4\10"+
    "\3\0\27\10\2\167\11\10\24\0\1\10\1\0\4\7"+
    "\3\0\1\170\36\7\1\170\2\7\24\0\1\7\1\0"+
    "\4\7\3\0\24\7\2\171\14\7\24\0\1\7\1\0"+
    "\4\10\3\0\1\172\36\10\1\172\2\10\24\0\1\10"+
    "\1\0\4\10\3\0\24\10\2\173\14\10\24\0\1\10"+
    "\1\0\4\7\3\0\35\7\2\174\3\7\24\0\1\7"+
    "\1\0\4\7\3\0\1\7\1\175\24\7\1\175\13\7"+
    "\24\0\1\7\1\0\4\10\3\0\35\10\2\176\3\10"+
    "\24\0\1\10\1\0\4\10\3\0\1\10\1\177\24\10"+
    "\1\177\13\10\24\0\1\10\1\0\4\10\3\0\6\10"+
    "\2\200\32\10\24\0\1\10\1\0\4\7\3\0\27\7"+
    "\2\201\11\7\24\0\1\7\1\0\4\10\3\0\27\10"+
    "\2\202\11\10\24\0\1\10\1\0\4\7\3\0\15\7"+
    "\2\203\23\7\24\0\1\7\1\0\4\7\3\0\11\7"+
    "\2\204\27\7\24\0\1\7\1\0\4\10\3\0\15\10"+
    "\2\205\23\10\24\0\1\10\1\0\4\10\3\0\11\10"+
    "\2\206\27\10\24\0\1\10\1\0\4\7\3\0\17\7"+
    "\2\207\21\7\24\0\1\7\1\0\4\10\3\0\17\10"+
    "\2\210\21\10\24\0\1\10\5\135\1\11\71\135\1\0"+
    "\4\7\3\0\6\7\2\211\32\7\24\0\1\7\1\0"+
    "\4\7\3\0\22\7\2\212\16\7\24\0\1\7\1\0"+
    "\4\7\3\0\6\7\2\213\32\7\24\0\1\7\1\0"+
    "\4\7\3\0\33\7\2\214\5\7\24\0\1\7\1\0"+
    "\4\10\3\0\6\10\2\215\32\10\24\0\1\10\1\0"+
    "\4\10\3\0\33\10\2\216\5\10\24\0\1\10\1\0"+
    "\4\7\3\0\15\7\2\217\23\7\24\0\1\7\1\0"+
    "\4\7\3\0\31\7\2\220\7\7\24\0\1\7\1\0"+
    "\4\10\3\0\31\10\2\221\7\10\24\0\1\10\1\0"+
    "\4\7\3\0\27\7\2\222\11\7\24\0\1\7\1\0"+
    "\4\7\3\0\6\7\2\223\32\7\24\0\1\7\1\0"+
    "\4\10\3\0\27\10\2\224\11\10\24\0\1\10\1\0"+
    "\4\10\3\0\6\10\2\225\32\10\24\0\1\10\1\0"+
    "\4\10\3\0\22\10\2\226\16\10\24\0\1\10\1\0"+
    "\4\7\3\0\13\7\2\227\25\7\24\0\1\7\1\0"+
    "\4\10\3\0\13\10\2\230\25\10\24\0\1\10\1\0"+
    "\4\7\3\0\6\7\2\231\32\7\24\0\1\7\1\0"+
    "\4\7\3\0\15\7\2\232\23\7\24\0\1\7\1\0"+
    "\4\10\3\0\6\10\2\233\32\10\24\0\1\10\1\0"+
    "\4\10\3\0\15\10\2\234\23\10\24\0\1\10\1\0"+
    "\4\7\3\0\13\7\2\235\25\7\24\0\1\7\1\0"+
    "\4\10\3\0\13\10\2\236\25\10\24\0\1\10\1\0"+
    "\4\7\3\0\6\7\2\237\32\7\24\0\1\7\1\0"+
    "\4\7\3\0\17\7\2\240\21\7\24\0\1\7\1\0"+
    "\4\7\3\0\2\7\2\241\36\7\24\0\1\7\1\0"+
    "\4\10\3\0\17\10\2\242\21\10\24\0\1\10\1\0"+
    "\4\10\3\0\2\10\2\243\36\10\24\0\1\10\1\0"+
    "\4\7\3\0\15\7\2\244\23\7\24\0\1\7\1\0"+
    "\4\10\3\0\15\10\2\245\23\10\24\0\1\10\1\0"+
    "\4\7\3\0\6\7\2\246\32\7\24\0\1\7\1\0"+
    "\4\10\3\0\6\10\2\247\32\10\24\0\1\10\1\0"+
    "\4\7\3\0\40\7\2\250\24\0\1\7\1\0\4\7"+
    "\3\0\17\7\2\251\21\7\24\0\1\7\1\0\4\10"+
    "\3\0\40\10\2\252\24\0\1\10\1\0\4\10\3\0"+
    "\17\10\2\253\21\10\24\0\1\10\1\0\4\7\3\0"+
    "\1\7\1\254\24\7\1\254\13\7\24\0\1\7\1\0"+
    "\4\10\3\0\1\10\1\255\24\10\1\255\13\10\24\0"+
    "\1\10\1\0\4\7\3\0\15\7\2\256\23\7\24\0"+
    "\1\7\1\0\4\10\3\0\15\10\2\257\23\10\24\0"+
    "\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6741];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\1\1\1\11\27\1\2\11"+
    "\1\1\1\11\1\1\11\11\3\1\3\11\1\1\1\11"+
    "\1\1\1\11\42\1\1\0\17\11\103\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[175];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

/*  Stuff enclosed in %{ %} is copied verbatim to the lexer class
 *  definition, all the extra variables/functions you want to use in the
 *  lexer actions should go here.  Don't remove or modify anything that
 *  was there initially.  */

    // Max size of string constants
    static int MAX_STR_CONST = 1025;

    // For assembling string constants
    StringBuffer string_buf = new StringBuffer();
    	
    private int curr_lineno = 1;
    private boolean lateUpdate = false;
    
    int get_curr_lineno() {
    	if(!lateUpdate){
    		return curr_lineno;
    	}
    	lateUpdate = false;
    	return (curr_lineno - 1);
    }
    
    // contatore per le parentesi dei commenti multiriga
	private int numpar = 0;

    private AbstractSymbol filename;

    void set_filename(String fname) {
	filename = AbstractTable.stringtable.addString(fname);
    }

    AbstractSymbol curr_filename() {
	return filename;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CoolLexer(java.io.Reader in) {
  
/*  Stuff enclosed in %init{ %init} is copied verbatim to the lexer
 *  class constructor, all the extra initialization you want to do should
 *  go here.  Don't remove or modify anything that was there initially. */


    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CoolLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return new Symbol(TokenConstants.LBRACE);
          }
        case 64: break;
        case 35: 
          { return new Symbol(TokenConstants.ERROR, "Unmatched *)");
          }
        case 65: break;
        case 2: 
          { return new Symbol(TokenConstants.INT_CONST, AbstractTable.inttable.addString(yytext()));
          }
        case 66: break;
        case 37: 
          { return new Symbol(TokenConstants.ASSIGN);
          }
        case 67: break;
        case 23: 
          { return new Symbol(TokenConstants.NEG);
          }
        case 68: break;
        case 31: 
          { return new Symbol(TokenConstants.IF);
          }
        case 69: break;
        case 49: 
          { return new Symbol(TokenConstants.LET);
          }
        case 70: break;
        case 4: 
          { return new Symbol(TokenConstants.TYPEID, AbstractTable.idtable.addString(yytext()));
          }
        case 71: break;
        case 34: 
          { yybegin(COMMENT); numpar = 1;
          }
        case 72: break;
        case 59: 
          { return new Symbol(TokenConstants.BOOL_CONST,"false");
          }
        case 73: break;
        case 32: 
          { return new Symbol(TokenConstants.IN);
          }
        case 74: break;
        case 12: 
          { return new Symbol(TokenConstants.EQ);
          }
        case 75: break;
        case 20: 
          { return new Symbol(TokenConstants.AT);
          }
        case 76: break;
        case 50: 
          { return new Symbol(TokenConstants.NEW);
          }
        case 77: break;
        case 42: 
          { string_buf.append('\t');
          }
        case 78: break;
        case 11: 
          { string_buf.setLength(0);yybegin(STRING);
          }
        case 79: break;
        case 29: 
          { yybegin(YYINITIAL);
          }
        case 80: break;
        case 56: 
          { return new Symbol(TokenConstants.LOOP);
          }
        case 81: break;
        case 17: 
          { return new Symbol(TokenConstants.COLON);
          }
        case 82: break;
        case 28: 
          { yybegin(YYINITIAL); curr_lineno++;
          }
        case 83: break;
        case 22: 
          { return new Symbol(TokenConstants.PLUS);
          }
        case 84: break;
        case 55: 
          { return new Symbol(TokenConstants.ESAC);
          }
        case 85: break;
        case 8: 
          { return new Symbol(TokenConstants.LPAREN);
          }
        case 86: break;
        case 61: 
          { return new Symbol(TokenConstants.WHILE);
          }
        case 87: break;
        case 47: 
          { string_buf.append('\\');
          }
        case 88: break;
        case 58: 
          { return new Symbol(TokenConstants.CASE);
          }
        case 89: break;
        case 63: 
          { return new Symbol(TokenConstants.INHERITS);
          }
        case 90: break;
        case 54: 
          { return new Symbol(TokenConstants.ELSE);
          }
        case 91: break;
        case 19: 
          { return new Symbol(TokenConstants.RBRACE);
          }
        case 92: break;
        case 16: 
          { return new Symbol(TokenConstants.DOT);
          }
        case 93: break;
        case 53: 
          { return new Symbol(TokenConstants.THEN);
          }
        case 94: break;
        case 38: 
          { return new Symbol(TokenConstants.LE);
          }
        case 95: break;
        case 9: 
          { return new Symbol(TokenConstants.MULT);
          }
        case 96: break;
        case 52: 
          { return new Symbol(TokenConstants.BOOL_CONST,"true");
          }
        case 97: break;
        case 43: 
          { string_buf.append('\f');
          }
        case 98: break;
        case 36: 
          { return new Symbol(TokenConstants.DARROW);
          }
        case 99: break;
        case 1: 
          { return new Symbol(TokenConstants.ERROR, yytext());
          }
        case 100: break;
        case 5: 
          { curr_lineno++;
          }
        case 101: break;
        case 30: 
          { return new Symbol(TokenConstants.FI);
          }
        case 102: break;
        case 7: 
          { return new Symbol(TokenConstants.MINUS);
          }
        case 103: break;
        case 45: 
          { string_buf.append('\"');
          }
        case 104: break;
        case 40: 
          { if(--numpar == 0){yybegin(YYINITIAL);}
          }
        case 105: break;
        case 62: 
          { return new Symbol(TokenConstants.ISVOID);
          }
        case 106: break;
        case 41: 
          { curr_lineno++; string_buf.append('\n');
          }
        case 107: break;
        case 33: 
          { return new Symbol(TokenConstants.OF);
          }
        case 108: break;
        case 39: 
          { numpar++;
          }
        case 109: break;
        case 13: 
          { return new Symbol(TokenConstants.SEMI);
          }
        case 110: break;
        case 3: 
          { return new Symbol(TokenConstants.OBJECTID,	AbstractTable.idtable.addString(yytext()));
          }
        case 111: break;
        case 51: 
          { return new Symbol(TokenConstants.NOT);
          }
        case 112: break;
        case 46: 
          { yybegin(NULL_FINDED);
							return new Symbol(TokenConstants.ERROR, "String contains escaped null character.");
          }
        case 113: break;
        case 15: 
          { return new Symbol(TokenConstants.COMMA);
          }
        case 114: break;
        case 27: 
          { yybegin(NULL_FINDED);
							if(string_buf.length() >= MAX_STR_CONST)
								return new Symbol(TokenConstants.ERROR, "String constant too long");
							return new Symbol(TokenConstants.ERROR, "String contains null character.");
          }
        case 115: break;
        case 25: 
          { yybegin(YYINITIAL);
							curr_lineno++;
							if (string_buf.length() >= MAX_STR_CONST){
								lateUpdate = true;
								return new Symbol(TokenConstants.ERROR, "String constant too long");
							}
								
							return new Symbol(TokenConstants.ERROR, "Unterminated string constant");
          }
        case 116: break;
        case 21: 
          { return new Symbol(TokenConstants.DIV);
          }
        case 117: break;
        case 14: 
          { return new Symbol(TokenConstants.LT);
          }
        case 118: break;
        case 44: 
          { string_buf.append('\n');
          }
        case 119: break;
        case 60: 
          { return new Symbol(TokenConstants.CLASS);
          }
        case 120: break;
        case 57: 
          { return new Symbol(TokenConstants.POOL);
          }
        case 121: break;
        case 10: 
          { return new Symbol(TokenConstants.RPAREN);
          }
        case 122: break;
        case 48: 
          { string_buf.append('\b');
          }
        case 123: break;
        case 26: 
          { yybegin(YYINITIAL);
							if (string_buf.length() >= MAX_STR_CONST)
								return new Symbol(TokenConstants.ERROR, "String constant too long");
								
							return new Symbol(TokenConstants.STR_CONST,
							AbstractTable.stringtable.addString(string_buf.toString()));
          }
        case 124: break;
        case 24: 
          { string_buf.append(yytext());
          }
        case 125: break;
        case 6: 
          { 
          }
        case 126: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 
/*  Stuff enclosed in %eofval{ %eofval} specifies java code that is
 *  executed when end-of-file is reached.  If you use multiple lexical
 *  states and want to do something special if an EOF is encountered in
 *  one of those states, place your code in the switch statement.
 *  Ultimately, you should return the EOF symbol, or your lexer won't
 *  work.  */

    switch(yystate()) {
	case COMMENT:
		yybegin(YYINITIAL);
		return new Symbol(TokenConstants.ERROR, "EOF in comment");
	case STRING:
		yybegin(YYINITIAL);
		return new Symbol(TokenConstants.ERROR, "EOF in string constant");
    }
    return new Symbol(TokenConstants.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
