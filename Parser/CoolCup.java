
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 16 17:31:11 CEST 2013
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 16 17:31:11 CEST 2013
  */
public class CoolCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolCup() {super();}

  /** Constructor which sets the default scanner. */
  public CoolCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\004\010\000\002\004\012" +
    "\000\002\005\002\000\002\005\003\000\002\005\006\000" +
    "\002\006\013\000\002\006\006\000\002\010\002\000\002" +
    "\010\003\000\002\010\005\000\002\007\005\000\002\011" +
    "\005\000\002\011\010\000\002\011\012\000\002\011\006" +
    "\000\002\011\011\000\002\011\007\000\002\011\005\000" +
    "\002\011\010\000\002\011\007\000\002\011\004\000\002" +
    "\011\004\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\004\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\004\000" +
    "\002\011\005\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\015\002\000\002\015" +
    "\003\000\002\015\005\000\002\014\004\000\002\014\005" +
    "\000\002\017\003\000\002\017\004\000\002\016\010\000" +
    "\002\013\002\000\002\013\004\000\002\012\004\000\002" +
    "\012\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\004\007\001\002\000\006\002\001\004" +
    "\007\001\002\000\004\002\212\001\002\000\006\002\uffff" +
    "\004\uffff\001\002\000\004\055\010\001\002\000\006\011" +
    "\012\050\011\001\002\000\010\043\ufffb\051\ufffb\056\016" +
    "\001\002\000\004\055\013\001\002\000\004\050\014\001" +
    "\002\000\010\043\ufffb\051\ufffb\056\016\001\002\000\006" +
    "\043\ufffa\051\ufffa\001\002\000\006\044\025\045\026\001" +
    "\002\000\006\043\020\051\021\001\002\000\004\056\016" +
    "\001\002\000\004\043\022\001\002\000\006\002\ufffc\004" +
    "\ufffc\001\002\000\004\043\024\001\002\000\006\043\ufff9" +
    "\051\ufff9\001\002\000\004\055\205\001\002\000\010\042" +
    "\ufff6\046\ufff6\056\030\001\002\000\006\042\034\046\035" +
    "\001\002\000\004\044\032\001\002\000\006\042\ufff5\046" +
    "\ufff5\001\002\000\004\055\033\001\002\000\006\042\ufff3" +
    "\046\ufff3\001\002\000\004\056\030\001\002\000\004\044" +
    "\036\001\002\000\004\055\037\001\002\000\004\050\040" +
    "\001\002\000\036\007\047\012\055\017\042\020\052\024" +
    "\044\025\050\027\053\041\056\045\057\050\041\052\045" +
    "\053\043\054\046\056\051\001\002\000\036\007\047\012" +
    "\055\017\042\020\052\024\044\025\050\027\053\041\056" +
    "\045\057\050\041\052\045\053\043\054\046\056\051\001" +
    "\002\000\036\007\047\012\055\017\042\020\052\024\044" +
    "\025\050\027\053\041\056\045\057\050\041\052\045\053" +
    "\043\054\046\056\051\001\002\000\052\005\uffdc\006\uffdc" +
    "\010\uffdc\014\uffdc\015\uffdc\016\uffdc\022\uffdc\030\uffdc\032" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc" +
    "\042\uffdc\043\uffdc\046\uffdc\047\uffdc\051\uffdc\001\002\000" +
    "\004\055\171\001\002\000\052\005\uffdb\006\uffdb\010\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\022\uffdb\030\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb" +
    "\043\uffdb\046\uffdb\047\uffdb\051\uffdb\001\002\000\052\005" +
    "\uffda\006\uffda\010\uffda\014\uffda\015\uffda\016\uffda\022\uffda" +
    "\030\uffda\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037" +
    "\uffda\040\uffda\042\uffda\043\uffda\046\uffda\047\uffda\051\uffda" +
    "\001\002\000\036\007\047\012\055\017\042\020\052\024" +
    "\044\025\050\027\053\041\056\045\057\050\041\052\045" +
    "\053\043\054\046\056\051\001\002\000\036\007\047\012" +
    "\055\017\042\020\052\024\044\025\050\027\053\041\056" +
    "\045\057\050\041\052\045\053\043\054\046\056\051\001" +
    "\002\000\056\005\uffdd\006\uffdd\010\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\022\uffdd\026\156\030\uffdd\032\uffdd\033\uffdd\034" +
    "\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd" +
    "\045\155\046\uffdd\047\uffdd\051\uffdd\001\002\000\036\007" +
    "\047\012\055\017\042\020\052\024\044\025\050\027\053" +
    "\041\056\045\057\050\041\052\045\053\043\054\046\056" +
    "\051\001\002\000\036\007\047\012\055\017\042\020\052" +
    "\024\044\025\050\027\053\041\056\045\057\050\041\052" +
    "\045\053\043\054\046\056\051\001\002\000\026\030\065" +
    "\032\063\033\066\034\061\035\062\036\064\037\072\040" +
    "\067\047\071\051\137\001\002\000\004\056\120\001\002" +
    "\000\036\007\047\012\055\017\042\020\052\024\044\025" +
    "\050\027\053\041\056\045\057\050\041\052\045\053\043" +
    "\054\046\056\051\001\002\000\036\007\047\012\055\017" +
    "\042\020\052\024\044\025\050\027\053\041\056\045\057" +
    "\050\041\052\045\053\043\054\046\056\051\001\002\000" +
    "\026\030\065\032\063\033\066\034\061\035\062\036\064" +
    "\037\072\040\067\046\070\047\071\001\002\000\036\007" +
    "\047\012\055\017\042\020\052\024\044\025\050\027\053" +
    "\041\056\045\057\050\041\052\045\053\043\054\046\056" +
    "\051\001\002\000\036\007\047\012\055\017\042\020\052" +
    "\024\044\025\050\027\053\041\056\045\057\050\041\052" +
    "\045\053\043\054\046\056\051\001\002\000\036\007\047" +
    "\012\055\017\042\020\052\024\044\025\050\027\053\041" +
    "\056\045\057\050\041\052\045\053\043\054\046\056\051" +
    "\001\002\000\036\007\047\012\055\017\042\020\052\024" +
    "\044\025\050\027\053\041\056\045\057\050\041\052\045" +
    "\053\043\054\046\056\051\001\002\000\036\007\047\012" +
    "\055\017\042\020\052\024\044\025\050\027\053\041\056" +
    "\045\057\050\041\052\045\053\043\054\046\056\051\001" +
    "\002\000\036\007\047\012\055\017\042\020\052\024\044" +
    "\025\050\027\053\041\056\045\057\050\041\052\045\053" +
    "\043\054\046\056\051\001\002\000\004\056\105\001\002" +
    "\000\052\005\uffde\006\uffde\010\uffde\014\uffde\015\uffde\016" +
    "\uffde\022\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\040\uffde\042\uffde\043\uffde\046\uffde\047" +
    "\uffde\051\uffde\001\002\000\004\055\074\001\002\000\036" +
    "\007\047\012\055\017\042\020\052\024\044\025\050\027" +
    "\053\041\056\045\057\050\041\052\045\053\043\054\046" +
    "\056\051\001\002\000\044\005\uffe2\006\uffe2\010\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\022\uffe2\032\063\033\066\034\061" +
    "\035\062\040\067\042\uffe2\043\uffe2\046\uffe2\047\071\051" +
    "\uffe2\001\002\000\004\040\075\001\002\000\004\056\076" +
    "\001\002\000\004\045\077\001\002\000\042\007\047\012" +
    "\055\017\042\020\052\024\044\025\050\027\053\041\056" +
    "\042\uffd9\045\057\046\uffd9\050\041\052\045\053\043\054" +
    "\046\056\051\001\002\000\030\030\065\032\063\033\066" +
    "\034\061\035\062\036\064\037\072\040\067\042\uffd8\046" +
    "\uffd8\047\071\001\002\000\006\042\102\046\103\001\002" +
    "\000\036\007\047\012\055\017\042\020\052\024\044\025" +
    "\050\027\053\041\056\045\057\050\041\052\045\053\043" +
    "\054\046\056\051\001\002\000\052\005\ufff0\006\ufff0\010" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\022\ufff0\030\ufff0\032\ufff0" +
    "\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042" +
    "\ufff0\043\ufff0\046\ufff0\047\ufff0\051\ufff0\001\002\000\030" +
    "\030\065\032\063\033\066\034\061\035\062\036\064\037" +
    "\072\040\067\042\uffd7\046\uffd7\047\071\001\002\000\004" +
    "\045\106\001\002\000\042\007\047\012\055\017\042\020" +
    "\052\024\044\025\050\027\053\041\056\042\uffd9\045\057" +
    "\046\uffd9\050\041\052\045\053\043\054\046\056\051\001" +
    "\002\000\006\042\102\046\110\001\002\000\052\005\ufff1" +
    "\006\ufff1\010\ufff1\014\ufff1\015\ufff1\016\ufff1\022\ufff1\030" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\042\ufff1\043\ufff1\046\ufff1\047\ufff1\051\ufff1\001" +
    "\002\000\052\005\uffe4\006\uffe4\010\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\022\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\067\042\uffe4\043\uffe4\046\uffe4" +
    "\047\071\051\uffe4\001\002\000\044\005\uffe1\006\uffe1\010" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\022\uffe1\032\063\033\066" +
    "\034\061\035\062\040\067\042\uffe1\043\uffe1\046\uffe1\047" +
    "\071\051\uffe1\001\002\000\044\005\uffe0\006\uffe0\010\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\022\uffe0\032\063\033\066\034" +
    "\061\035\062\040\067\042\uffe0\043\uffe0\046\uffe0\047\071" +
    "\051\uffe0\001\002\000\052\005\uffe7\006\uffe7\010\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\022\uffe7\030\uffe7\032\uffe7\033\066" +
    "\034\uffe7\035\062\036\uffe7\037\uffe7\040\067\042\uffe7\043" +
    "\uffe7\046\uffe7\047\071\051\uffe7\001\002\000\052\005\uffe5" +
    "\006\uffe5\010\uffe5\014\uffe5\015\uffe5\016\uffe5\022\uffe5\030" +
    "\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5" +
    "\040\067\042\uffe5\043\uffe5\046\uffe5\047\071\051\uffe5\001" +
    "\002\000\052\005\uffe6\006\uffe6\010\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\022\uffe6\030\uffe6\032\uffe6\033\066\034\uffe6\035" +
    "\062\036\uffe6\037\uffe6\040\067\042\uffe6\043\uffe6\046\uffe6" +
    "\047\071\051\uffe6\001\002\000\052\005\uffe3\006\uffe3\010" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\022\uffe3\030\uffe3\032\uffe3" +
    "\033\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\067\042" +
    "\uffe3\043\uffe3\046\uffe3\047\071\051\uffe3\001\002\000\004" +
    "\044\121\001\002\000\004\055\122\001\002\000\010\010" +
    "\uffd1\026\124\042\uffd1\001\002\000\006\010\127\042\126" +
    "\001\002\000\036\007\047\012\055\017\042\020\052\024" +
    "\044\025\050\027\053\041\056\045\057\050\041\052\045" +
    "\053\043\054\046\056\051\001\002\000\034\010\uffd0\030" +
    "\065\032\063\033\066\034\061\035\062\036\064\037\072" +
    "\040\067\042\uffd0\043\uffd0\047\071\051\uffd0\001\002\000" +
    "\004\056\132\001\002\000\036\007\047\012\055\017\042" +
    "\020\052\024\044\025\050\027\053\041\056\045\057\050" +
    "\041\052\045\053\043\054\046\056\051\001\002\000\052" +
    "\005\uffeb\006\uffeb\010\uffeb\014\uffeb\015\uffeb\016\uffeb\022" +
    "\uffeb\030\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\042\uffeb\043\uffeb\046\uffeb\047\uffeb\051" +
    "\uffeb\001\002\000\052\005\uffcf\006\uffcf\010\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\022\uffcf\030\065\032\063\033\066\034" +
    "\061\035\062\036\064\037\072\040\067\042\uffcf\043\uffcf" +
    "\046\uffcf\047\071\051\uffcf\001\002\000\004\044\133\001" +
    "\002\000\004\055\134\001\002\000\010\010\uffd1\026\124" +
    "\042\uffd1\001\002\000\006\010\127\042\126\001\002\000" +
    "\052\005\uffce\006\uffce\010\uffce\014\uffce\015\uffce\016\uffce" +
    "\022\uffce\030\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\042\uffce\043\uffce\046\uffce\047\uffce" +
    "\051\uffce\001\002\000\006\043\ufff8\051\ufff8\001\002\000" +
    "\052\005\uffdf\006\uffdf\010\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\022\uffdf\030\065\032\063\033\066\034\061\035\062\036" +
    "\064\037\072\040\067\042\uffdf\043\uffdf\046\uffdf\047\071" +
    "\051\uffdf\001\002\000\026\022\142\030\065\032\063\033" +
    "\066\034\061\035\062\036\064\037\072\040\067\047\071" +
    "\001\002\000\004\056\144\001\002\000\006\021\uffd4\056" +
    "\uffd4\001\002\000\004\044\150\001\002\000\006\021\147" +
    "\056\144\001\002\000\006\021\uffd3\056\uffd3\001\002\000" +
    "\052\005\uffea\006\uffea\010\uffea\014\uffea\015\uffea\016\uffea" +
    "\022\uffea\030\uffea\032\uffea\033\uffea\034\uffea\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\042\uffea\043\uffea\046\uffea\047\uffea" +
    "\051\uffea\001\002\000\004\055\151\001\002\000\004\023" +
    "\152\001\002\000\036\007\047\012\055\017\042\020\052" +
    "\024\044\025\050\027\053\041\056\045\057\050\041\052" +
    "\045\053\043\054\046\056\051\001\002\000\026\030\065" +
    "\032\063\033\066\034\061\035\062\036\064\037\072\040" +
    "\067\043\154\047\071\001\002\000\006\021\uffd2\056\uffd2" +
    "\001\002\000\042\007\047\012\055\017\042\020\052\024" +
    "\044\025\050\027\053\041\056\042\uffd9\045\057\046\uffd9" +
    "\050\041\052\045\053\043\054\046\056\051\001\002\000" +
    "\036\007\047\012\055\017\042\020\052\024\044\025\050" +
    "\027\053\041\056\045\057\050\041\052\045\053\043\054" +
    "\046\056\051\001\002\000\052\005\ufff2\006\ufff2\010\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\022\ufff2\030\065\032\063\033" +
    "\066\034\061\035\062\036\064\037\072\040\067\042\ufff2" +
    "\043\ufff2\046\ufff2\047\071\051\ufff2\001\002\000\006\042" +
    "\102\046\161\001\002\000\052\005\uffef\006\uffef\010\uffef" +
    "\014\uffef\015\uffef\016\uffef\022\uffef\030\uffef\032\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\042\uffef" +
    "\043\uffef\046\uffef\047\uffef\051\uffef\001\002\000\052\005" +
    "\uffe8\006\uffe8\010\uffe8\014\uffe8\015\uffe8\016\uffe8\022\uffe8" +
    "\030\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\067\042\uffe8\043\uffe8\046\uffe8\047\071\051\uffe8" +
    "\001\002\000\026\016\164\030\065\032\063\033\066\034" +
    "\061\035\062\036\064\037\072\040\067\047\071\001\002" +
    "\000\036\007\047\012\055\017\042\020\052\024\044\025" +
    "\050\027\053\041\056\045\057\050\041\052\045\053\043" +
    "\054\046\056\051\001\002\000\026\005\166\030\065\032" +
    "\063\033\066\034\061\035\062\036\064\037\072\040\067" +
    "\047\071\001\002\000\036\007\047\012\055\017\042\020" +
    "\052\024\044\025\050\027\053\041\056\045\057\050\041" +
    "\052\045\053\043\054\046\056\051\001\002\000\026\006" +
    "\170\030\065\032\063\033\066\034\061\035\062\036\064" +
    "\037\072\040\067\047\071\001\002\000\052\005\uffee\006" +
    "\uffee\010\uffee\014\uffee\015\uffee\016\uffee\022\uffee\030\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\042\uffee\043\uffee\046\uffee\047\uffee\051\uffee\001\002" +
    "\000\052\005\uffe9\006\uffe9\010\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\022\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\046\uffe9\047" +
    "\uffe9\051\uffe9\001\002\000\026\014\173\030\065\032\063" +
    "\033\066\034\061\035\062\036\064\037\072\040\067\047" +
    "\071\001\002\000\036\007\047\012\055\017\042\020\052" +
    "\024\044\025\050\027\053\041\056\045\057\050\041\052" +
    "\045\053\043\054\046\056\051\001\002\000\026\015\175" +
    "\030\065\032\063\033\066\034\061\035\062\036\064\037" +
    "\072\040\067\047\071\001\002\000\052\005\uffed\006\uffed" +
    "\010\uffed\014\uffed\015\uffed\016\uffed\022\uffed\030\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\042\uffed\043\uffed\046\uffed\047\uffed\051\uffed\001\002\000" +
    "\040\007\047\012\055\017\042\020\052\024\044\025\050" +
    "\027\053\041\056\045\057\050\041\051\202\052\045\053" +
    "\043\054\046\056\051\001\002\000\026\030\065\032\063" +
    "\033\066\034\061\035\062\036\064\037\072\040\067\043" +
    "\200\047\071\001\002\000\040\007\uffd6\012\uffd6\017\uffd6" +
    "\020\uffd6\024\uffd6\025\uffd6\027\uffd6\041\uffd6\045\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\056\uffd6\001\002" +
    "\000\026\030\065\032\063\033\066\034\061\035\062\036" +
    "\064\037\072\040\067\043\203\047\071\001\002\000\052" +
    "\005\uffec\006\uffec\010\uffec\014\uffec\015\uffec\016\uffec\022" +
    "\uffec\030\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\040\uffec\042\uffec\043\uffec\046\uffec\047\uffec\051" +
    "\uffec\001\002\000\040\007\uffd5\012\uffd5\017\uffd5\020\uffd5" +
    "\024\uffd5\025\uffd5\027\uffd5\041\uffd5\045\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\054\uffd5\056\uffd5\001\002\000\006" +
    "\042\ufff4\046\ufff4\001\002\000\010\026\124\043\uffd1\051" +
    "\uffd1\001\002\000\006\043\ufff7\051\ufff7\001\002\000\006" +
    "\043\020\051\210\001\002\000\004\043\211\001\002\000" +
    "\006\002\ufffd\004\ufffd\001\002\000\004\002\000\001\002" +
    "\000\006\002\ufffe\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\010\002\004\003\003\004\005\001\001\000" +
    "\004\004\212\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\206\006" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\016\006\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\030\010\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\053\001\001\000\006\011\176\014\175\001\001" +
    "\000\004\011\171\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\162" +
    "\001\001\000\004\011\161\001\001\000\002\001\001\000" +
    "\004\011\140\001\001\000\004\011\137\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\116\001\001\000" +
    "\004\011\057\001\001\000\002\001\001\000\004\011\115" +
    "\001\001\000\004\011\114\001\001\000\004\011\113\001" +
    "\001\000\004\011\112\001\001\000\004\011\111\001\001" +
    "\000\004\011\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\077\015\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\077" +
    "\015\106\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\122" +
    "\001\001\000\004\012\127\001\001\000\004\011\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\134\001\001\000\004" +
    "\012\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\142\017\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\077\015\157" +
    "\001\001\000\004\011\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\164\001\001\000\002\001\001\000" +
    "\004\011\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\205\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolCup$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolCup parser;

  /** Constructor */
  CUP$CoolCup$actions(CoolCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolCup$do_action(
    int                        CUP$CoolCup$act_num,
    java_cup.runtime.lr_parser CUP$CoolCup$parser,
    java.util.Stack            CUP$CoolCup$stack,
    int                        CUP$CoolCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolCup$result;

      /* select the action based on the action number */
      switch (CUP$CoolCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // letbody ::= COMMA OBJECTID COLON TYPEID optional_assign letbody 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression oa = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression lb = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new let(curr_lineno(), o, t, oa, lb); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("letbody",8, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // letbody ::= IN expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = e; 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("letbody",8, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // optional_assign ::= ASSIGN expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = e; 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("optional_assign",9, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // optional_assign ::= 
            {
              Expression RESULT =null;
		 RESULT = new no_expr(curr_lineno()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("optional_assign",9, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // case ::= OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              Case RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new branch(curr_lineno(), o, t, e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("case",12, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // case_list ::= case_list case 
            {
              Cases RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("case_list",13, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // case_list ::= case 
            {
              Cases RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Cases(curr_lineno())).appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("case_list",13, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_list ::= expr_list expr SEMI 
            {
              Expressions RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = el.appendElement(e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr_list",10, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_list ::= expr SEMI 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr_list",10, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // param_list ::= param_list COMMA expr 
            {
              Expressions RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expressions pl = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = pl.appendElement(e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("param_list",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // param_list ::= expr 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Expressions(curr_lineno())).appendElement(e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("param_list",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param_list ::= 
            {
              Expressions RESULT =null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("param_list",11, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= BOOL_CONST 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new bool_const(curr_lineno(),b); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= STR_CONST 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new string_const(curr_lineno(),s); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= INT_CONST 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new int_const(curr_lineno(),i); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= OBJECTID 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new object(curr_lineno(),o); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = e; 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new comp(curr_lineno(),e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new eq(curr_lineno(),a,b); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr LE expr 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new leq(curr_lineno(),a,b); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr LT expr 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new lt(curr_lineno(),a,b); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= NEG expr 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new neg(curr_lineno(),a); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new divide(curr_lineno(),a,b); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new mul(curr_lineno(),a,b); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new sub(curr_lineno(),a,b); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Expression a = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression b = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new plus(curr_lineno(),a,b); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= ISVOID expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new isvoid(curr_lineno(),e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new new_(curr_lineno(),t); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= CASE expr OF case_list ESAC 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Cases cl = (Cases)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new typcase(curr_lineno(), e, cl); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= LET OBJECTID COLON TYPEID optional_assign letbody 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int oaleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int oaright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression oa = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression lb = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new let(curr_lineno(), o, t, oa, lb); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= LBRACE expr_list RBRACE 
            {
              Expression RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expressions el = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new block(curr_lineno(), el); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= WHILE expr LOOP expr POOL 
            {
              Expression RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression pred = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression body = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new loop(curr_lineno(), pred, body); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		Expression pred = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int then_exprleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int then_exprright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Expression then_expr = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int else_exprleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int else_exprright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression else_expr = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new cond(curr_lineno(), pred, then_expr, else_expr); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= OBJECTID LPAREN param_list RPAREN 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expressions pl = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), o, pl); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr AT TYPEID DOT OBJECTID LPAREN param_list RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expressions pl = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new static_dispatch(curr_lineno(), e, t, o, pl); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr DOT OBJECTID LPAREN param_list RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expressions pl = (Expressions)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new dispatch(curr_lineno(), e, o, pl); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new assign(curr_lineno(), o, e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formal ::= OBJECTID COLON TYPEID 
            {
              Formal RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new formalc(curr_lineno(), o, t); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("formal",5, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formal_list ::= formal_list COMMA formal 
            {
              Formals RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("formal_list",6, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formal_list ::= formal 
            {
              Formals RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Formal f = (Formal)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("formal_list",6, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal_list ::= 
            {
              Formals RESULT =null;
		 RESULT = new Formals(curr_lineno()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("formal_list",6, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // feature ::= OBJECTID COLON TYPEID optional_assign 
            {
              Feature RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new attr(curr_lineno(), o, t, e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // feature ::= OBJECTID LPAREN formal_list RPAREN COLON TYPEID LBRACE expr RBRACE 
            {
              Feature RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-8)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-8)).right;
		AbstractSymbol o = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-8)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).right;
		Formals fl = (Formals)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = new method(curr_lineno(), o, fl, t, e); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("feature",4, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-8)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // feature_list ::= feature_list SEMI feature SEMI 
            {
              Features RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).right;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		 RESULT = fl.appendElement(f); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("feature_list",3, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-3)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // feature_list ::= feature 
            {
              Features RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Features(curr_lineno())).appendElement(f); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("feature_list",3, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // feature_list ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("feature_list",3, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              Class_ RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new class_c(curr_lineno(), t, p, fl, curr_filename()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class",2, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-7)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class ::= CLASS TYPEID LBRACE feature_list RBRACE SEMI 
            {
              Class_ RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-4)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).right;
		Features fl = (Features)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-2)).value;
		 RESULT = new class_c(curr_lineno(), t, 
						AbstractTable.idtable.addString("Object"),
						fl, curr_filename()); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class",2, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-5)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Class_ c = (Class_)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Class_ c = (Class_)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)).value;
		RESULT = start_val;
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.elementAt(CUP$CoolCup$top-1)), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CoolCup$parser.done_parsing();
          return CUP$CoolCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              Program RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolCup$stack.peek()).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolCup$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolCup$stack.peek()), RESULT);
            }
          return CUP$CoolCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

